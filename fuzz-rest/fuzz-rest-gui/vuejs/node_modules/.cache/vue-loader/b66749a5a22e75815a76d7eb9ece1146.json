{"remainingRequest":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js??vue-loader-options!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/shared/event-list.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/shared/event-list.vue","mtime":1579030948224},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n\nimport DefaultList from './default-list'\n\nexport default {\n  props: ['events'],\n  components: {\n    DefaultList\n  },\n  data() {\n    return {\n      formatters: [\n        { field: 'createdAt', as: 'date' },\n      ],\n      fields: [\n        { key: 'type', thStyle: 'width: 50px;' },\n        { key: 'content' },\n        { key: 'createdAt', label: 'Created @', thStyle: 'width: 150px;' },\n      ],\n    }\n  },\n  methods: {\n    addTypeColouring(event) {\n      switch (event.type) {\n        case 'ERROR': event._rowVariant = 'danger' \n        break\n        case 'WARN': event._rowVariant = 'warning'\n        break\n      }\n    }\n  },\n  computed: {\n    eventEnriched() {\n      if (this.events !== null) {\n        this.events.forEach(event => { this.addTypeColouring(event) } )\n      }\n      return this.events\n    },\n  },\n  created: function () { },\n}\n",{"version":3,"sources":["event-list.vue"],"names":[],"mappings":";;;;;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"event-list.vue","sourceRoot":"src/shared","sourcesContent":["<template>\n  <default-list :fields=\"fields\" :items=\"this.eventEnriched\" :formatters=\"formatters\"></default-list>\n</template>\n\n<script>\n  import DefaultList from './default-list'\n\n  export default {\n    props: ['events'],\n    components: {\n      DefaultList\n    },\n    data() {\n      return {\n        formatters: [\n          { field: 'createdAt', as: 'date' },\n        ],\n        fields: [\n          { key: 'type', thStyle: 'width: 50px;' },\n          { key: 'content' },\n          { key: 'createdAt', label: 'Created @', thStyle: 'width: 150px;' },\n        ],\n      }\n    },\n    methods: {\n      addTypeColouring(event) {\n        switch (event.type) {\n          case 'ERROR': event._rowVariant = 'danger' \n          break\n          case 'WARN': event._rowVariant = 'warning'\n          break\n        }\n      }\n    },\n    computed: {\n      eventEnriched() {\n        if (this.events !== null) {\n          this.events.forEach(event => { this.addTypeColouring(event) } )\n        }\n        return this.events\n      },\n    },\n    created: function () { },\n  }\n</script>"]}]}