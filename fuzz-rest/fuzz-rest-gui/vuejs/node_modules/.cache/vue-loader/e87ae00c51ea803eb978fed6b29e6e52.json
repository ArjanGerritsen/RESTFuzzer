{"remainingRequest":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js??vue-loader-options!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/components/settings/settings-delete.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/components/settings/settings-delete.vue","mtime":1579030948222},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Store from '../../store/store';\nimport RestService from '../../shared/service/rest-service';\nimport MessageService from '../../shared/service/message-service';\n\nexport default {\n  data() {\n    return {\n      restService: new RestService(this.$bvToast),\n      messageService: new MessageService(this)\n    }\n  }, \n  computed: {\n    setting() { return Store.getters.admin_setting; }\n  },\n  methods: {\n    hide() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    async deleteSetting() {\n      await this.restService.deleteSetting(this.setting)\n        .then(response => {\n          this.messageService.info(\"Delete setting\", \"Setting deleted successful.\");\n          Store.commit('admin_setting_set', { setting: null } );\n        })\n         .catch(error => {\n          this.messageService.error(\"An error occured while deleting setting\", error); \n        }\n      );\n\n      this.restService.getAdminSettings()\n        .then(settings => {\n          Store.commit('admin_settings_set', { settings: settings });\n        })\n        .catch(error => {\n          this.messageService.error(\"Couldn't retrieve settings\", error);\n          Store.commit('admin_settings_set', { settings: [] } );\n        }\n      );\n\n      this.hide();\n    }\n  }\n}\n",{"version":3,"sources":["settings-delete.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAwBA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"settings-delete.vue","sourceRoot":"src/components/settings","sourcesContent":["<template>\n  <div>\n    <b-modal id=\"settings-delete\" ref=\"modal\" centered v-if=\"this.setting\" size=\"xs\">\n      <template slot=\"modal-header\">\n        <h6><font-awesome-icon icon=\"trash-alt\" size=\"1x\" />&nbsp;Delete setting</h6>\n      </template>\n\n      <template slot=\"default\">\n        Are you sure you want to delete setting '{{this.setting.key}}'.\n      </template>\n\n      <template slot=\"modal-footer\" slot-scope=\"{ cancel }\">\n        <b-button variant=\"outline-danger\" @click=\"deleteSetting()\">\n          <font-awesome-icon icon=\"trash-alt\" size=\"xs\" />&nbsp; delete\n        </b-button>\n        <b-button variant=\"outline-secondary\" @click=\"cancel()\">\n          <font-awesome-icon icon=\"times-circle\" size=\"xs\" />&nbsp; cancel\n        </b-button>\n      </template>\n    </b-modal>\n  </div>\n</template>\n\n<script>\nimport Store from '../../store/store';\nimport RestService from '../../shared/service/rest-service';\nimport MessageService from '../../shared/service/message-service';\n\nexport default {\n  data() {\n    return {\n      restService: new RestService(this.$bvToast),\n      messageService: new MessageService(this)\n    }\n  }, \n  computed: {\n    setting() { return Store.getters.admin_setting; }\n  },\n  methods: {\n    hide() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    async deleteSetting() {\n      await this.restService.deleteSetting(this.setting)\n        .then(response => {\n          this.messageService.info(\"Delete setting\", \"Setting deleted successful.\");\n          Store.commit('admin_setting_set', { setting: null } );\n        })\n         .catch(error => {\n          this.messageService.error(\"An error occured while deleting setting\", error); \n        }\n      );\n\n      this.restService.getAdminSettings()\n        .then(settings => {\n          Store.commit('admin_settings_set', { settings: settings });\n        })\n        .catch(error => {\n          this.messageService.error(\"Couldn't retrieve settings\", error);\n          Store.commit('admin_settings_set', { settings: [] } );\n        }\n      );\n\n      this.hide();\n    }\n  }\n}\n</script>"]}]}