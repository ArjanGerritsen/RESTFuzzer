{"remainingRequest":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/thread-loader/dist/cjs.js!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js??vue-loader-options!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/components/tasks/task-detail.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/components/tasks/task-detail.vue","mtime":1579030948223},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport store from '../../store/store';\nimport axios from 'axios';\nimport EventList from '../../shared/event-list';\nimport RestService from '../../shared/service/rest-service';\nexport default {\n  components: {\n    EventList: EventList\n  },\n  data: function data() {\n    return {\n      restService: new RestService(this.$bvToast),\n      events: null\n    };\n  },\n  methods: {\n    getEvents: function getEvents() {\n      var _this = this;\n\n      // if (this.events !== null) {\n      //   return\n      // }\n      axios.get(\"rest/admin/tasks/\".concat(this.task.id, \"/events\")).then(function (response) {\n        _this.events = response.data;\n      }).catch(function (error) {\n        RestService.handleError(\"Couldn't retrieve events for administrative task.\", error);\n        _this.events = [];\n      });\n    }\n  },\n  computed: {\n    task: function task() {\n      return store.getters.admin_task;\n    }\n  },\n  created: function created() {}\n};",{"version":3,"sources":["task-detail.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA,OAAA,KAAA,MAAA,mBAAA;AACA,OAAA,KAAA,MAAA,OAAA;AACA,OAAA,SAAA,MAAA,yBAAA;AACA,OAAA,WAAA,MAAA,mCAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,SAAA,EAAA;AADA,GADA;AAIA,EAAA,IAJA,kBAIA;AACA,WAAA;AACA,MAAA,WAAA,EAAA,IAAA,WAAA,CAAA,KAAA,QAAA,CADA;AAEA,MAAA,MAAA,EAAA;AAFA,KAAA;AAIA,GATA;AAUA,EAAA,OAAA,EAAA;AACA,IAAA,SADA,uBACA;AAAA;;AACA;AACA;AACA;AACA,MAAA,KAAA,CACA,GADA,4BACA,KAAA,IAAA,CAAA,EADA,cAEA,IAFA,CAEA,UAAA,QAAA,EAAA;AAAA,QAAA,KAAA,CAAA,MAAA,GAAA,QAAA,CAAA,IAAA;AAAA,OAFA,EAGA,KAHA,CAGA,UAAA,KAAA,EAAA;AACA,QAAA,WAAA,CAAA,WAAA,CAAA,mDAAA,EAAA,KAAA;AACA,QAAA,KAAA,CAAA,MAAA,GAAA,EAAA;AACA,OANA;AAQA;AAbA,GAVA;AAyBA,EAAA,QAAA,EAAA;AACA,IAAA,IADA,kBACA;AACA,aAAA,KAAA,CAAA,OAAA,CAAA,UAAA;AACA;AAHA,GAzBA;AA8BA,EAAA,OAAA,EAAA,mBAAA,CAAA;AA9BA,CAAA","sourcesContent":["<template>\n  <b-card v-if=\"this.task !== null\" no-body>\n    <b-tabs nav-tabs card>\n      <b-tab title=\"General\" active>\n        <b-card-text>\n          <div class=\"row\">\n            <div class=\"col\" style=\"margin:5px 0px 15px 0px;\">\n              <b-button type=\"submit\" variant=\"outline-primary\"><font-awesome-icon icon=\"running\" size=\"xs\" />&nbsp;execute</b-button>\n              <b-button type=\"submit\" variant=\"outline-danger\"><font-awesome-icon icon=\"trash-alt\" size=\"xs\" />&nbsp;delete</b-button>\n            </div>\n          </div>\n          <div class=\"row\">\n            <div class=\"col\">\n              <dl class=\"dl-horizontal\">\n                <dt>Status</dt>\n                <dd>{{this.task.status}}</dd>\n                <dt>Type</dt>\n                <dd>{{this.task.type}}</dd>\n              </dl>\n            </div>\n            <div class=\"col\">\n              <dl class=\"dl-horizontal\">\n                <dt>Description</dt>\n                <dd>{{this.task.description}}</dd>\n                <dt>Created @</dt>\n                <dd>{{this.task.createdAt | formatDate }}</dd>\n                <dt>Last started @</dt>\n                <dd>{{this.task.lastStartedAt | formatDate }}</dd>\n              </dl>\n            </div>\n          </div>\n        </b-card-text>\n      </b-tab>\n      <b-tab title=\"Payload\">\n        <b-card-text>\n          <div class=\"row\">\n            <div class=\"col\">\n              <dl class=\"dl-horizontal\">\n                <dt>Payload</dt>\n                <dd>{{this.task.payload}}</dd>\n              </dl>\n            </div>\n          </div>\n        </b-card-text>\n      </b-tab>\n      <b-tab title=\"Events\" @click=\"getEvents()\">\n        <b-card-text>\n          <event-list :events=\"events\"></event-list>\n        </b-card-text>\n      </b-tab>\n    </b-tabs>\n  </b-card>\n</template>\n\n<script>\nimport store from '../../store/store'\nimport axios from 'axios'\nimport EventList from '../../shared/event-list'\nimport RestService from '../../shared/service/rest-service'\n\nexport default {\n  components: {\n    EventList\n  },\n  data() {\n    return {\n      restService: new RestService(this.$bvToast),\n      events: null,\n    }\n  },\n  methods: {\n    getEvents() {\n      // if (this.events !== null) {\n      //   return\n      // }\n      axios\n        .get(`rest/admin/tasks/${this.task.id}/events`)\n        .then(response => { this.events = response.data })\n        .catch(error => {\n          RestService.handleError(\"Couldn't retrieve events for administrative task.\", error)\n          this.events = []\n        }\n      )\n    },\n  },\n  computed: {\n    task() {\n      return store.getters.admin_task\n    },\n  },\n  created: function () { },\n}\n</script>"],"sourceRoot":"src/components/tasks"}]}