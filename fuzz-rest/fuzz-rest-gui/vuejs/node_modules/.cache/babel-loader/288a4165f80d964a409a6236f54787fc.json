{"remainingRequest":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/thread-loader/dist/cjs.js!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js??ref--0-0!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js??vue-loader-options!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/components/settings/settings-add.vue?vue&type=script&lang=js&","dependencies":[{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/components/settings/settings-add.vue","mtime":1579030948222},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _regeneratorRuntime from \"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport Store from '../../store/store';\nimport RestService from '../../shared/service/rest-service';\nimport MessageService from '../../shared/service/message-service';\nexport default {\n  data: function data() {\n    return {\n      typeOptions: [{\n        text: 'String',\n        value: 'STRING'\n      }, {\n        text: 'Number',\n        value: 'NUMBER'\n      }, {\n        text: 'Boolean',\n        value: 'BOOLEAN'\n      }],\n      scopeOptions: [{\n        text: 'Global',\n        value: 'GLOBAL'\n      }, {\n        text: 'Project',\n        value: 'PROJECT'\n      }],\n      booleanOptions: [{\n        text: 'True',\n        value: 'TRUE'\n      }, {\n        text: 'False',\n        value: 'FALSE'\n      }],\n      setting: {\n        key: \"\",\n        type: null,\n        scope: null,\n        description: \"\",\n        value: \"\"\n      },\n      restService: new RestService(this.$bvToast),\n      messageService: new MessageService(this)\n    };\n  },\n  methods: {\n    reset: function reset() {\n      this.setting.key = \"\";\n      this.setting.type = null;\n      this.setting.scope = null;\n      this.setting.description = \"\";\n      this.setting.value = \"\";\n    },\n    hide: function hide() {\n      var _this = this;\n\n      this.$nextTick(function () {\n        _this.$refs.modal.hide();\n      });\n    },\n    cancel: function cancel() {\n      this.reset();\n      this.hide();\n    },\n    addSetting: function () {\n      var _addSetting = _asyncToGenerator(\n      /*#__PURE__*/\n      _regeneratorRuntime.mark(function _callee() {\n        var _this2 = this;\n\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.restService.addSetting(this.setting).then(function (response) {\n                  _this2.messageService.info(\"Add setting\", \"Setting added successful.\");\n\n                  _this2.cancel();\n\n                  _this2.restService.getAdminSettings().then(function (settings) {\n                    Store.commit('admin_settings_set', {\n                      settings: settings\n                    });\n                  }).catch(function (error) {\n                    _this2.messageService.error(\"Couldn't retrieve administrative settings\", error);\n\n                    Store.commit('admin_settings_set', {\n                      settings: []\n                    });\n                  });\n                }).catch(function (error) {\n                  _this2.messageService.error(\"An error occured while saving setting\", error);\n                });\n\n              case 2:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function addSetting() {\n        return _addSetting.apply(this, arguments);\n      }\n\n      return addSetting;\n    }()\n  },\n  computed: {\n    updateMode: function updateMode() {\n      return this.settings && this.setting.id !== 0;\n    }\n  }\n};",{"version":3,"sources":["settings-add.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <b-modal\n    id=\"settings-add\"\n    ref=\"modal\"\n    scrollable\n    size=\"lg\"\n    header-bg-variant=\"light\"\n    footer-bg-variant=\"light\"\n  >\n    <template slot=\"modal-header\">\n      <h6 v-if=\"!updateMode\">\n        <font-awesome-icon icon=\"plus\" size=\"1x\"/>&nbsp;Add setting\n      </h6>\n      <h6 v-if=\"updateMode\">\n        <font-awesome-icon icon=\"wrench\" size=\"1x\"/>&nbsp;Edit setting\n      </h6>\n    </template>\n\n    <b-form>\n      <b-form-group label=\"Key:\" label-for=\"input-key\">\n        <b-form-input \n          id=\"input-key\"\n          v-model=\"setting.key\"\n          placeholder=\"Enter key\">\n        </b-form-input>\n      </b-form-group>\n\n      <b-form-group label=\"Description:\" label-for=\"textarea-description\">\n        <b-form-textarea\n          id=\"textarea-description\"\n          v-model=\"setting.description\"\n          placeholder=\"Enter description\"\n        ></b-form-textarea>\n      </b-form-group>\n\n      <b-form-group label=\"Type:\">\n        <b-form-radio-group\n          id=\"radio-type\"\n          v-model=\"setting.type\"\n          :options=\"typeOptions\"\n          name=\"radio-type\"\n        ></b-form-radio-group>\n      </b-form-group>\n\n      <b-form-group label=\"Scope:\">\n        <b-form-radio-group\n          id=\"radio-scope\"\n          v-model=\"setting.scope\"\n          :options=\"scopeOptions\"\n          name=\"radio-scope\"\n        ></b-form-radio-group>\n      </b-form-group>\n\n      <b-form-group\n        v-if=\"setting.type === 'STRING'\"\n        label=\"Value:\"\n        label-for=\"input-value-string\"\n      >\n        <b-form-input\n          id=\"input-value-string\" \n          type=\"text\" \n          v-model=\"setting.value\"\n          placeholder=\"Enter value\">\n        </b-form-input>\n      </b-form-group>\n\n      <b-form-group\n        v-if=\"setting.type === 'NUMBER'\"\n        label=\"Value:\"\n        label-for=\"input-value-number\"\n      >\n        <b-form-input\n          id=\"input-value-number\"\n          type=\"number\"\n          v-model=\"setting.value\"\n          placeholder=\"Enter value\">\n        </b-form-input>\n        <b-form-invalid-feedback id=\"input-value-validation\">\n          Value is a required field.\n        </b-form-invalid-feedback>\n      </b-form-group>\n\n      <b-form-group v-if=\"setting.type === 'BOOLEAN'\" label=\"Value:\">\n        <b-form-radio-group\n          v-model=\"setting.value\"\n          :options=\"booleanOptions\"\n          name=\"radio-boolean\"\n        ></b-form-radio-group>\n      </b-form-group>\n    </b-form>\n\n    <template slot=\"modal-footer\" slot-scope=\"{ cancel }\">\n      <b-button v-if=\"!updateMode\" variant=\"primary\" @click=\"addSetting()\">\n        <font-awesome-icon icon=\"plus\" size=\"1x\"/>&nbsp;add setting\n      </b-button>\n      <b-button v-if=\"updateMode\" variant=\"primary\" @click=\"updateSetting()\">\n        <font-awesome-icon icon=\"wrench\" size=\"1x\"/>&nbsp;update setting\n      </b-button>\n      <b-button variant=\"outline-secondary\" @click=\"cancel()\">\n        <font-awesome-icon icon=\"times-circle\" size=\"xs\" />&nbsp; cancel\n      </b-button>\n    </template>\n  </b-modal>\n</template>\n\n<script>\nimport Store from '../../store/store';\nimport RestService from '../../shared/service/rest-service';\nimport MessageService from '../../shared/service/message-service';\n\nexport default {\n  data() {\n    return {\n      typeOptions: [\n        { text: 'String', value: 'STRING' },\n        { text: 'Number', value: 'NUMBER' },\n        { text: 'Boolean', value: 'BOOLEAN' }\n      ],\n      scopeOptions: [\n        { text: 'Global', value: 'GLOBAL' },\n        { text: 'Project', value: 'PROJECT' }\n      ],\n      booleanOptions: [\n        { text: 'True', value: 'TRUE' },\n        { text: 'False', value: 'FALSE' }\n      ],\n      setting: {\n        key: \"\",\n        type: null,\n        scope: null,\n        description: \"\",\n        value: \"\"\n      },\n      restService: new RestService(this.$bvToast),\n      messageService: new MessageService(this)\n    };\n  },\n  methods: {\n    reset() {\n      this.setting.key = \"\";\n      this.setting.type = null;\n      this.setting.scope = null;\n      this.setting.description = \"\";\n      this.setting.value = \"\";\n    },\n    hide() {\n      this.$nextTick(() => {\n        this.$refs.modal.hide();\n      });\n    },\n    cancel() {\n      this.reset();\n      this.hide();\n    },\n    async addSetting() {\n      await this.restService.addSetting(this.setting)\n        .then(response => {\n          this.messageService.info(\"Add setting\", \"Setting added successful.\");\n\n          this.cancel();\n\n          this.restService.getAdminSettings()\n            .then(settings => {\n                Store.commit('admin_settings_set', { settings: settings });\n            })\n            .catch(error => {\n              this.messageService.error(\"Couldn't retrieve administrative settings\", error); \n              Store.commit('admin_settings_set', { settings: [] } );\n            }\n          );\n        })\n        .catch(error => {\n          this.messageService.error(\"An error occured while saving setting\", error); \n        }\n      );\n    }\n  },\n  computed: {\n    updateMode() {\n      return this.settings && this.setting.id !== 0;\n    }\n  }\n};\n</script>"],"sourceRoot":"src/components/settings"}]}