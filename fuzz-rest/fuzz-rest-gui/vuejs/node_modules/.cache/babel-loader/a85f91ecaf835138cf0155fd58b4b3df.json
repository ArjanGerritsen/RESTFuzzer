{"remainingRequest":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/thread-loader/dist/cjs.js!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/eslint-loader/index.js??ref--13-0!/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/shared/service/rest-service.js","dependencies":[{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/shared/service/rest-service.js","mtime":1579030948225},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/node_modules/eslint-loader/index.js","mtime":499162500000}],"contextDependencies":[],"result":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport axios from 'axios';\nimport store from '../../store/store';\n\nvar RestService =\n/*#__PURE__*/\nfunction () {\n  function RestService(toast) {\n    _classCallCheck(this, RestService);\n\n    RestService.toast = toast;\n  }\n\n  _createClass(RestService, [{\n    key: \"getProjects\",\n    value: function getProjects() {\n      axios.get('/rest/projects').then(function (response) {\n        store.commit('projects_set', {\n          projects: response.data\n        });\n      }).catch(function (error) {\n        RestService.handleError(\"Couldn't retrieve projects.\", error);\n        store.commit('projects_set', {\n          projects: []\n        });\n      });\n    }\n  }, {\n    key: \"addProject\",\n    value: function addProject(project) {\n      axios.post('/rest/projects', project).then(function (response) {\n        console.log('done');\n      }).catch(function (error) {\n        RestService.handleError(\"Couldn't add project.\", error);\n      });\n    }\n  }, {\n    key: \"getAdminTasks\",\n    value: function getAdminTasks() {\n      axios.get('/rest/admin/tasks').then(function (response) {\n        store.commit('admin_tasks_set', {\n          tasks: response.data\n        });\n      }).catch(function (error) {\n        RestService.handleError(\"Couldn't retrieve administrative tasks.\", error);\n        store.commit('admin_tasks_set', {\n          tasks: []\n        });\n      });\n    }\n  }, {\n    key: \"getAdminSettings\",\n    value: function getAdminSettings() {\n      return new Promise(function (resolve, reject) {\n        axios.get('/rest/admin/settings').then(function (response) {\n          resolve(response.data);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"addSetting\",\n    value: function addSetting(setting) {\n      return new Promise(function (resolve, reject) {\n        axios.post('/rest/admin/settings', setting).then(function (response) {\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"updateSetting\",\n    value: function updateSetting(setting) {\n      return new Promise(function (resolve, reject) {\n        axios.put(\"/rest/admin/settings/\".concat(setting.id), setting).then(function (response) {\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"deleteSetting\",\n    value: function deleteSetting(setting) {\n      return new Promise(function (resolve, reject) {\n        axios.delete(\"/rest/admin/settings/\".concat(setting.id)).then(function (response) {\n          resolve(response);\n        }).catch(function (error) {\n          reject(error);\n        });\n      });\n    }\n  }, {\n    key: \"getAdminTaskEvents\",\n    value: function getAdminTaskEvents(taskId, events) {\n      axios.get(\"/rest/admin/tasks/\".concat(taskId, \"/events\")).then(function (response) {\n        events = response.data;\n      }).catch(function (error) {\n        RestService.handleError(\"Couldn't retrieve events for administrative task.\", error);\n      });\n    }\n  }], [{\n    key: \"handleError\",\n    value: function handleError(text, error) {\n      this.toast.toast(text, {\n        title: 'AJAX call failed',\n        variant: 'danger',\n        noAutoHide: true,\n        appendToast: true\n      });\n    }\n  }, {\n    key: \"displayToast\",\n    value: function displayToast(title, text) {\n      this.toast.toast(text, {\n        title: title,\n        variant: 'primary',\n        noAutoHide: false,\n        appendToast: true\n      });\n    }\n  }]);\n\n  return RestService;\n}();\n\n_defineProperty(RestService, \"toast\", void 0);\n\nexport { RestService as default };",{"version":3,"sources":["/ws/git/ou-prototype/fuzz-rest/fuzz-rest-gui/vuejs/src/shared/service/rest-service.js"],"names":["axios","store","RestService","toast","get","then","response","commit","projects","data","catch","error","handleError","project","post","console","log","tasks","Promise","resolve","reject","setting","put","id","delete","taskId","events","text","title","variant","noAutoHide","appendToast"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport store from '../../store/store'\n\nexport default class RestService {\n  static toast;\n\n  constructor(toast) {\n    RestService.toast = toast;\n  }\n\n  getProjects() {\n    axios\n      .get('/rest/projects')\n      .then(response => { store.commit('projects_set', { projects: response.data } ) })\n      .catch(error => {\n        RestService.handleError(\"Couldn't retrieve projects.\", error); \n        store.commit('projects_set', { projects: [] } \n        );\n      }\n    )\n  }\n\n  addProject(project) {\n    axios\n      .post('/rest/projects', project)\n      .then(response => { console.log('done') })\n      .catch(error => { RestService.handleError(\"Couldn't add project.\", error); }\n    )    \n  }\n\n  getAdminTasks() {\n    axios\n      .get('/rest/admin/tasks')\n      .then(response => { store.commit('admin_tasks_set', { tasks: response.data } ) })\n      .catch(error => {\n        RestService.handleError(\"Couldn't retrieve administrative tasks.\", error); \n        store.commit('admin_tasks_set', { tasks: [] } \n        );\n      }\n    )\n  }\n\n  getAdminSettings() {\n    return new Promise( function (resolve, reject) {\n      axios\n        .get('/rest/admin/settings')\n        .then(response => { resolve(response.data); } )\n        .catch(error => { reject(error); } )\n    })\n  }\n\n  addSetting(setting) {\n    return new Promise( function (resolve, reject) {\n      axios\n        .post('/rest/admin/settings', setting)\n        .then(response => { resolve(response); })\n        .catch(error => { reject(error); } )\n    })\n  }\n\n  updateSetting(setting) {\n    return new Promise( function (resolve, reject) {\n      axios\n        .put(`/rest/admin/settings/${setting.id}`, setting)\n        .then(response => { resolve(response); })\n        .catch(error => { reject(error); } )\n    })\n  }  \n\n  deleteSetting(setting) {\n    return new Promise( function (resolve, reject) {\n      axios\n        .delete(`/rest/admin/settings/${setting.id}`)\n        .then(response => { resolve(response); })\n        .catch(error => { reject(error); } )\n    })\n  }  \n\n  getAdminTaskEvents(taskId, events) {\n    axios\n      .get(`/rest/admin/tasks/${taskId}/events`)\n      .then(response => { events = response.data })\n      .catch(error => { RestService.handleError(\"Couldn't retrieve events for administrative task.\", error) }\n    )\n  }\n\n  static handleError(text, error) {\n    this.toast.toast(text, {\n      title: 'AJAX call failed',\n      variant: 'danger',\n      noAutoHide: true,\n      appendToast: true\n    })\n  }\n\n  static displayToast(title, text) {\n    this.toast.toast(text, {\n      title: title,\n      variant: 'primary',\n      noAutoHide: false,\n      appendToast: true\n    })\n  }  \n}"]}]}